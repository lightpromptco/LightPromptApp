import { useEffect, useMemo, useRef, useState } from 'react';
import { DragDropContext, Droppable, Draggable, DropResult } from 'react-beautiful-dnd';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';

// ----------------------- Types -----------------------
interface Widget {
  id: string;
  title: string;
  type:
    | 'metric' | 'progress' | 'activity' | 'chart' | 'quick-action'
    | 'weather' | 'quotes' | 'calendar' | 'book-store'
    | 'uv' | 'pollen' | 'breathing' | 'gratitude' | 'dream';
  content: any;
  size: 'small' | 'medium' | 'large';
  enabled: boolean;
  description?: string;
}
interface DashboardWidgetsProps {
  userId: string;
  dashboardData: any;
  user: any; // can include calendarUrl?: string
}

// ----------------------- Defaults -----------------------
const DEFAULT_WIDGETS: Widget[] = [
  { id: 'wellness-overview', title: 'Wellness Overview', type: 'metric', content: { metric: 'wellness' }, size: 'large', enabled: true },
  { id: 'daily-checkin',     title: 'Daily Check-in',     type: 'quick-action', content: { action: 'checkin' }, size: 'medium', enabled: true },
  { id: 'habit-progress',    title: 'Habit Progress',     type: 'progress', content: { metric: 'habits' }, size: 'medium', enabled: true },
  { id: 'recent-activity',   title: 'Recent Activity',    type: 'activity', content: { type: 'recent' }, size: 'large', enabled: true },
  { id: 'ai-insights',       title: 'AI Insights',        type: 'chart', content: { type: 'insights' }, size: 'medium', enabled: true },
  { id: 'quick-chat',        title: 'Quick Chat',         type: 'quick-action', content: { action: 'chat' }, size: 'small', enabled: true },
  { id: 'book-store',        title: 'LightPrompt:ed Book', type: 'book-store', content: { type: 'store' }, size: 'large', enabled: true },
  { id: 'weather-now',       title: 'Local Weather',      type: 'weather', content: {}, size: 'small', enabled: true },
  { id: 'uv-index',          title: 'UV Index',           type: 'uv', content: {}, size: 'small', enabled: true },
  { id: 'pollen',            title: 'Pollen Count',       type: 'pollen', content: {}, size: 'medium', enabled: true },
  { id: 'quote-today',       title: 'Quote of the Moment', type: 'quotes', content: {}, size: 'medium', enabled: true },
  { id: 'calendar-today',    title: 'Today‚Äôs Calendar',   type: 'calendar', content: {}, size: 'medium', enabled: true },
  { id: 'breathing',         title: 'Breathing Exercise (4-7-8)', type: 'breathing', content: {}, size: 'medium', enabled: true },
  { id: 'gratitude',         title: 'Daily Gratitude',    type: 'gratitude', content: {}, size: 'medium', enabled: true },
  { id: 'dream',             title: 'Dream Journal',      type: 'dream', content: {}, size: 'medium', enabled: true },
];

// ----------------------- Helpers: data & utils -----------------------
type Geo = { lat: number; lon: number };
type Weather = { tempF: number; code: number; label: string; emoji: string } | null;
type Quote = { text: string; author: string } | null;
type CalEvent = { dt: Date; title: string };
type UV = { max: number } | null;
type Pollen = { tree: number; grass: number; weed: number } | null;

async function getGeo(): Promise<Geo> {
  return new Promise((resolve) => {
    if (!navigator.geolocation) return resolve({ lat: 39.8283, lon: -98.5795 });
    navigator.geolocation.getCurrentPosition(
      (pos) => resolve({ lat: pos.coords.latitude, lon: pos.coords.longitude }),
      () => resolve({ lat: 39.8283, lon: -98.5795 }),
      { enableHighAccuracy: true, timeout: 6000 }
    );
  });
}

function weatherCodeToLabel(code: number) {
  const map: Record<string, { label: string; emoji: string }> = {
    '0': { label: 'Clear', emoji: '‚òÄÔ∏è' }, '1': { label: 'Mainly Clear', emoji: 'üå§Ô∏è' },
    '2': { label: 'Partly Cloudy', emoji: '‚õÖ' }, '3': { label: 'Overcast', emoji: '‚òÅÔ∏è' },
    '45': { label: 'Fog', emoji: 'üå´Ô∏è' }, '48': { label: 'Rime Fog', emoji: 'üå´Ô∏è' },
    '51': { label: 'Drizzle', emoji: 'üå¶Ô∏è' }, '53': { label: 'Drizzle', emoji: 'üå¶Ô∏è' }, '55': { label: 'Drizzle', emoji: 'üå¶Ô∏è' },
    '61': { label: 'Rain', emoji: 'üåßÔ∏è' }, '63': { label: 'Rain', emoji: 'üåßÔ∏è' }, '65': { label: 'Rain', emoji: 'üåßÔ∏è' },
    '71': { label: 'Snow', emoji: '‚ùÑÔ∏è' }, '73': { label: 'Snow', emoji: '‚ùÑÔ∏è' }, '75': { label: 'Snow', emoji: '‚ùÑÔ∏è' },
    '80': { label: 'Showers', emoji: 'üåßÔ∏è' }, '81': { label: 'Showers', emoji: 'üåßÔ∏è' }, '82': { label: 'Showers', emoji: 'üåßÔ∏è' },
    '95': { label: 'Thunder', emoji: '‚õàÔ∏è' }, '96': { label: 'Thunder', emoji: '‚õàÔ∏è' }, '99': { label: 'Thunder', emoji: '‚õàÔ∏è' },
  };
  return map[String(code)] || { label: 'Weather', emoji: 'üå§Ô∏è' };
}

async function fetchWeather(lat: number, lon: number): Promise<Weather> {
  try {
    const url = `https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lon}&current=temperature_2m,weather_code&temperature_unit=fahrenheit`;
    const res = await fetch(url, { cache: 'no-store' });
    const data = await res.json();
    const t = data?.current?.temperature_2m;
    const code = data?.current?.weather_code;
    if (t == null || code == null) return null;
    const { label, emoji } = weatherCodeToLabel(code);
    return { tempF: Math.round(Number(t)), code, label, emoji };
  } catch { return null; }
}

async function fetchQuote(): Promise<Quote> {
  try {
    const res = await fetch('https://api.quotable.io/random?tags=inspirational|wisdom', { cache: 'no-store' });
    const data = await res.json();
    return { text: data?.content || 'Keep going.', author: data?.author || '‚Äî' };
  } catch { return { text: 'Keep going.', author: '‚Äî' }; }
}

async function fetchUV(lat: number, lon: number): Promise<UV> {
  try {
    const url = `https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lon}&daily=uv_index_max&timezone=auto`;
    const res = await fetch(url, { cache: 'no-store' });
    const data = await res.json();
    const max = data?.daily?.uv_index_max?.[0];
    if (max == null) return null;
    return { max: Number(max) };
  } catch { return null; }
}

async function fetchPollen(lat: number, lon: number): Promise<Pollen> {
  try {
    const url = `https://pollen-api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lon}&daily=tree_pollen,grass_pollen,weed_pollen&timezone=auto`;
    const res = await fetch(url, { cache: 'no-store' });
    const data = await res.json();
    const t = data?.daily?.tree_pollen?.[0];
    const g = data?.daily?.grass_pollen?.[0];
    const w = data?.daily?.weed_pollen?.[0];
    if (t == null || g == null || w == null) return null;
    return { tree: Number(t), grass: Number(g), weed: Number(w) };
  } catch { return null; }
}

/** Super-light ICS parser: DTSTART + SUMMARY lines only (next 5) */
async function fetchCalendar(icsUrl?: string): Promise<CalEvent[]> {
  if (!icsUrl) return [];
  try {
    const res = await fetch(icsUrl, { cache: 'no-store' });
    const text = await res.text();
    const lines = text.split(/\r?\n/);
    const events: CalEvent[] = [];
    let current: Partial<CalEvent> = {};
    for (const line of lines) {
      if (line.startsWith('BEGIN:VEVENT')) current = {};
      if (line.startsWith('DTSTART')) {
        const m = line.match(/DTSTART.*:(\d{8}T?\d{6}Z?)/);
        if (m) {
          const raw = m[1];
          const iso = raw.endsWith('Z')
            ? raw.replace(/^(\d{4})(\d{2})(\d{2})T(\d{2})(\d{2})(\d{2})Z$/, '$1-$2-$3T$4:$5:$6Z')
            : raw.replace(/^(\d{4})(\d{2})(\d{2})T?(\d{2})(\d{2})(\d{2})$/, '$1-$2-$3T$4:$5:$6');
          (current as any).dt = new Date(iso);
        }
      }
      if (line.startsWith('SUMMARY:')) (current as any).title = line.replace('SUMMARY:', '').trim();
      if (line.startsWith('END:VEVENT')) if (current.dt && current.title) events.push(current as CalEvent);
    }
    const now = new Date();
    return events.filter(e => e.dt > now).sort((a, b) => a.dt.getTime() - b.dt.getTime()).slice(0, 5);
  } catch { return []; }
}

// ----------------------- Component -----------------------
export function DashboardWidgets({ userId, dashboardData, user }: DashboardWidgetsProps) {
  const [widgets, setWidgets] = useState<Widget[]>(() => {
    const saved = sessionStorage.getItem(`dashboard-layout-${userId}`);
    return saved ? JSON.parse(saved) : DEFAULT_WIDGETS;
  });
  const [isEditMode, setIsEditMode] = useState(false);

  // Live data state
  const [geo, setGeo] = useState<Geo | null>(null);
  const [weather, setWeather] = useState<Weather>(null);
  const [quote, setQuote] = useState<Quote>(null);
  const [events, setEvents] = useState<CalEvent[]>([]);
  const [uv, setUV] = useState<UV>(null);
  const [pollen, setPollen] = useState<Pollen>(null);

  // Persist layout
  useEffect(() => {
    sessionStorage.setItem(`dashboard-layout-${userId}`, JSON.stringify(widgets));
  }, [widgets, userId]);

  // Fetch live data
  useEffect(() => {
    let mounted = true;
    (async () => {
      const g = await getGeo();
      if (!mounted) return;
      setGeo(g);
      const [w, q, ev, u, p] = await Promise.all([
        fetchWeather(g.lat, g.lon),
        fetchQuote(),
        fetchCalendar(user?.calendarUrl),
        fetchUV(g.lat, g.lon),
        fetchPollen(g.lat, g.lon),
      ]);
      if (!mounted) return;
      setWeather(w); setQuote(q); setEvents(ev); setUV(u); setPollen(p);
    })();
    return () => { mounted = false; };
  }, [user?.calendarUrl]);

  // --------------- DnD ---------------
  const handleDragEnd = (result: DropResult) => {
    if (!result.destination) return;
    const items = Array.from(widgets);
    const [reordered] = items.splice(result.source.index, 1);
    items.splice(result.destination.index, 0, reordered);
    setWidgets(items);
  };
  const toggleWidget = (widgetId: string) => setWidgets(widgets.map(w => w.id === widgetId ? { ...w, enabled: !w.enabled } : w));
  const resetLayout = () => { setWidgets(DEFAULT_WIDGETS); sessionStorage.removeItem(`dashboard-layout-${userId}`); };
  const addWidget = (widget: Widget) => setWidgets([...widgets, widget]);
  const enabledWidgets = widgets.filter(w => w.enabled);

  // --------------- Render helpers ---------------
  const getWidgetSizeClass = (size: string) => {
    switch (size) {
      case 'small': return 'col-span-1';
      case 'medium': return 'col-span-1 md:col-span-2';
      case 'large': return 'col-span-1 md:col-span-2 lg:col-span-3';
      default: return 'col-span-1';
    }
  };
  const getWidgetIcon = (type: string) => {
    const map: Record<string, JSX.Element> = {
      metric: <i className="fas fa-chart-bar text-blue-500" />,
      progress: <i className="fas fa-tasks text-green-500" />,
      activity: <i className="fas fa-clock text-purple-500" />,
      chart: <i className="fas fa-chart-line text-orange-500" />,
      'quick-action': <i className="fas fa-bolt text-yellow-500" />,
      quotes: <i className="fas fa-quote-left text-pink-500" />,
      weather: <i className="fas fa-cloud-sun text-cyan-500" />,
      calendar: <i className="fas fa-calendar text-indigo-500" />,
      'book-store': <i className="fas fa-book text-emerald-500" />,
      uv: <i className="fas fa-sun text-amber-500" />,
      pollen: <i className="fas fa-leaf text-lime-600" />,
      breathing: <i className="fas fa-wind text-teal-600" />,
      gratitude: <i className="fas fa-heart text-rose-500" />,
      dream: <i className="fas fa-moon text-violet-500" />,
    };
    return map[type] ?? <i className="fas fa-square text-gray-500" />;
  };

  const renderWidget = (widget: Widget, index: number) => (
    <Draggable key={widget.id} draggableId={widget.id} index={index} isDragDisabled={!isEditMode}>
      {(provided, snapshot) => (
        <div ref={provided.innerRef} {...provided.draggableProps}
          className={`transition-all duration-200 ${snapshot.isDragging ? 'rotate-2 scale-105 z-50' : ''}`}>
          <Card className={`${getWidgetSizeClass(widget.size)} ${isEditMode ? 'border-blue-300 border-2 border-dashed bg-blue-50' : ''} ${snapshot.isDragging ? 'shadow-2xl border-blue-500' : ''} hover:shadow-lg transition-all duration-200 relative`}>
            {isEditMode && (
              <div className="absolute top-2 right-2 z-50">
                <Button size="sm" variant="ghost"
                  onClick={(e) => { e.stopPropagation(); e.preventDefault(); toggleWidget(widget.id); }}
                  onMouseDown={(e) => { e.stopPropagation(); e.preventDefault(); }}
                  onPointerDown={(e) => { e.stopPropagation(); e.preventDefault(); }}
                  className="h-6 w-6 p-0 bg-white/90 hover:bg-red-100 shadow-sm border border-gray-200 pointer-events-auto"
                  style={{ pointerEvents: 'auto' }}>
                  <i className="fas fa-times text-red-500 text-xs"></i>
                </Button>
              </div>
            )}
            <CardHeader {...provided.dragHandleProps} className={`${isEditMode ? 'pb-2 cursor-grab active:cursor-grabbing' : ''}`}>
              <CardTitle className="flex items-center text-lg">
                {isEditMode && <i className="fas fa-grip-vertical mr-2 text-gray-400"></i>}
                {getWidgetIcon(widget.type)} <span className="ml-2">{widget.title}</span>
              </CardTitle>
            </CardHeader>
            <CardContent>{renderWidgetContent(widget)}</CardContent>
          </Card>
        </div>
      )}
    </Draggable>
  );

  // ----------------------- Widget bodies -----------------------
  const renderWidgetContent = (widget: Widget) => {
    switch (widget.type) {
      case 'metric': return renderMetricWidget(widget);
      case 'progress': return renderProgressWidget(widget);
      case 'activity': return renderActivityWidget(widget);
      case 'chart': return renderChartWidget(widget);
      case 'quick-action': return renderQuickActionWidget(widget);
      case 'quotes': return renderQuotesWidget(widget);
      case 'weather': return renderWeatherWidget(widget);
      case 'calendar': return renderCalendarWidget(widget);
      case 'book-store': return renderBookStoreWidget(widget);
      case 'uv': return renderUVWidget();
      case 'pollen': return renderPollenWidget();
      case 'breathing': return renderBreathingWidget();
      case 'gratitude': return renderGratitudeWidget();
      case 'dream': return renderDreamWidget();
      default: return <div className="text-gray-500">Widget content</div>;
    }
  };

  // ------- Metric (Wellness Overview) -------
  const renderMetricWidget = (widget: Widget) => {
    const stored = (() => { try { return JSON.parse(localStorage.getItem('lp-checkins') || '[]'); } catch { return []; } })() as Array<{ mood?: number; energy?: number; ts?: string }>;
    const metrics = dashboardData?.wellnessMetrics ?? {};
    const mood = metrics.mood ?? Math.round((stored.reduce((a, c) => a + (c.mood ?? 5), 0) / Math.max(1, stored.length)));
    const energy = metrics.energy ?? Math.round((stored.reduce((a, c) => a + (c.energy ?? 5), 0) / Math.max(1, stored.length)));
    const streakDays = dashboardData?.streakDays ?? Number(localStorage.getItem('lp-streak') || 0);

    return (
      <div className="space-y-4">
        <div className="grid grid-cols-2 gap-4">
          <div className="text-center"><div className="text-2xl font-bold">{mood >= 7 ? 'üòä' : mood >= 5 ? 'üòê' : 'üòî'}</div><div className="text-sm text-gray-600">Mood</div></div>
          <div className="text-center"><div className="text-2xl font-bold text-blue-600">{energy ?? 0}/10</div><div className="text-sm text-gray-600">Energy</div></div>
        </div>
        <div className="text-center">
          <div className="text-lg font-semibold text-purple-600">{streakDays} day streak</div>
          <div className="text-xs text-gray-500">Keep it up!</div>
        </div>
      </div>
    );
  };

  // ------- Progress (Habits) -------
  const renderProgressWidget = (widget: Widget) => {
    const habits = dashboardData?.habits ?? (() => { try { return JSON.parse(localStorage.getItem('lp-habits') || '[]'); } catch { return []; } })();
    const completedToday = habits.filter((h: any) => h.completedToday).length;
    const totalHabits = habits.length;
    const progress = totalHabits > 0 ? (completedToday / totalHabits) * 100 : 0;

    return (
      <div className="space-y-3">
        <div className="flex items-center justify-between">
          <span className="text-sm font-medium">Today's Habits</span>
          <Badge variant="outline">{completedToday}/{totalHabits}</Badge>
        </div>
        <Progress value={progress} className="h-2" />
        <div className="text-xs text-gray-500 text-center">{Math.round(progress)}% complete</div>
      </div>
    );
  };

  // ------- Activity -------
  const renderActivityWidget = (widget: Widget) => {
    const items = dashboardData?.activities ?? (() => { try { return JSON.parse(localStorage.getItem('lp-activity') || '[]'); } catch { return []; } })();
    const list = (items as any[]).slice(0, 4);
    if (!list.length) return <div className="p-3 bg-gray-50 rounded text-sm text-gray-600">No recent activity. Try a daily check-in or start a chat to see activity appear here.</div>;
    return (
      <div className="space-y-3">
        {list.map((a, i) => (
          <div key={i} className="flex items-center space-x-3 p-2 bg-gray-50 rounded">
            <div className="w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center"><i className="fas fa-star text-white text-xs"></i></div>
            <div className="flex-1"><div className="text-sm font-medium">{a.title ?? 'Activity'}</div><div className="text-xs text-gray-500">{a.when ?? 'Just now'}</div></div>
          </div>
        ))}
      </div>
    );
  };

  // ------- AI Insights (light demo) -------
  const renderChartWidget = (widget: Widget) => {
    const insights = [
      'üí° You focus better within 2 hours after sunrise.',
      'üåô Wind down improves when screens go off 60 min before bed.',
      'üèÉ Morning movement boosts mood by ~30%.',
      'üåø Air quality impacts your afternoon energy.',
    ];
    const tip = insights[Math.floor(Math.random() * insights.length)];
    return (
      <div className="space-y-3">
        <div className="text-sm font-medium text-center">AI Insights</div>
        <div className="bg-gradient-to-r from-blue-50 to-purple-50 p-3 rounded border border-blue-100">
          <div className="text-sm text-gray-700 mb-2">{tip}</div>
          <div className="text-xs text-gray-500">Auto-generated from your patterns</div>
        </div>
        <div className="flex justify-center">
          <Button size="sm" variant="outline" onClick={() => (window.location.href = '/dashboard?view=growth')}>
            <i className="fas fa-chart-line mr-1"></i> View Details
          </Button>
        </div>
      </div>
    );
  };

  // ------- Quick Actions -------
  const renderQuickActionWidget = (widget: Widget) => {
    if (widget.content?.action === 'checkin') {
      const save = (mood: number) => {
        const now = new Date();
        const key = 'lp-checkins';
        const arr = (() => { try { return JSON.parse(localStorage.getItem(key) || '[]'); } catch { return []; } })();
        arr.push({ mood, energy: mood, ts: now.toISOString() });
        localStorage.setItem(key, JSON.stringify(arr));
        const streak = Number(localStorage.getItem('lp-streak') || '0') + 1;
        localStorage.setItem('lp-streak', String(streak));
      };
      return (
        <div className="space-y-3">
          <div className="text-center">
            <div className="text-sm text-gray-600 mb-3">How are you feeling today?</div>
            <div className="flex justify-center space-x-2">
              {[9, 6, 3].map((score, i) => (
                <Button key={i} variant="ghost" size="sm" className="text-xl hover:bg-blue-50" onClick={() => save(score)}>
                  {score >= 8 ? 'üòä' : score >= 5 ? 'üòê' : 'üòî'}
                </Button>
              ))}
            </div>
          </div>
          <Button className="w-full bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700" size="sm"
            onClick={() => (window.location.href = '/dashboard?view=checkin')}>
            <i className="fas fa-heart mr-2"></i> Complete Check-in
          </Button>
        </div>
      );
    }
    if (widget.content?.action === 'chat') {
      return (
        <div className="space-y-3">
          <div className="text-sm text-gray-600 text-center">Start a conversation with your AI companion</div>
          <Button className="w-full" size="sm" variant="outline" onClick={() => (window.location.href = '/chat')}>
            <i className="fas fa-comments mr-2"></i> Open Chat
          </Button>
        </div>
      );
    }
    return <div className="text-gray-500 text-center">Quick action</div>;
  };

  // ------- Quotes (live) -------
  const renderQuotesWidget = () => (
    <div className="space-y-3">
      <div className="bg-gradient-to-br from-pink-50 to-purple-50 p-4 rounded-lg border border-pink-100">
        <div className="text-sm text-gray-700 mb-2 italic">"{quote?.text ?? 'Loading‚Ä¶'}"</div>
        <div className="text-xs text-gray-500 text-right">‚Äî {quote?.author ?? '...'}</div>
      </div>
      <div className="text-center">
        <Button size="sm" variant="ghost" onClick={() => setQuote(null) || fetchQuote().then(setQuote)}>
          <i className="fas fa-refresh mr-1"></i> New Quote
        </Button>
      </div>
    </div>
  );

  // ------- Weather (live) -------
  const renderWeatherWidget = () => (
    <div className="space-y-3 text-center">
      <div className="text-2xl mb-1">{weather?.emoji ?? 'üå§Ô∏è'}</div>
      <div className="text-lg font-semibold">{weather ? `${weather.tempF}¬∞F` : '‚Äî'}</div>
      <div className="text-xs text-gray-600">{weather?.label ?? 'Locating‚Ä¶'}</div>
      {geo && <div className="bg-cyan-50 p-2 rounded text-center text-xs text-cyan-700 mt-2">{(Math.abs(geo.lat).toFixed(2))}¬∞, {(Math.abs(geo.lon).toFixed(2))}¬∞</div>}
    </div>
  );

  // ------- UV (live) -------
  const renderUVWidget = () => {
    const badge =
      !uv ? { t: '‚Äî', c: 'bg-gray-500' }
      : uv.max < 3 ? { t: 'Low', c: 'bg-emerald-600' }
      : uv.max < 6 ? { t: 'Moderate', c: 'bg-yellow-500' }
      : uv.max < 8 ? { t: 'High', c: 'bg-orange-500' }
      : uv.max < 11 ? { t: 'Very High', c: 'bg-red-600' }
      : { t: 'Extreme', c: 'bg-fuchsia-700' };
    const value = uv?.max ?? 0;
    return (
      <div className="space-y-3 text-center">
        <div className="text-2xl font-bold">{value.toFixed(1)}</div>
        <div className={`inline-block text-white text-xs px-2 py-1 rounded ${badge.c}`}>{badge.t}</div>
        <div className="text-xs text-gray-600">Daily max UV (Open-Meteo)</div>
      </div>
    );
  };

  // ------- Pollen (live) -------
  const renderPollenWidget = () => {
    const t = pollen?.tree ?? 0, g = pollen?.grass ?? 0, w = pollen?.weed ?? 0;
    const score = Math.round((t + g + w) / 3);
    const label =
      score < 2 ? { t: 'Low', c: 'bg-emerald-600' }
      : score < 4 ? { t: 'Moderate', c: 'bg-yellow-500' }
      : score < 6 ? { t: 'High', c: 'bg-orange-500' }
      : { t: 'Very High', c: 'bg-red-600' };
    return (
      <div className="space-y-3">
        <div className="flex items-center justify-between text-sm">
          <span>Tree</span><span className="font-medium">{t}</span>
        </div>
        <div className="flex items-center justify-between text-sm">
          <span>Grass</span><span className="font-medium">{g}</span>
        </div>
        <div className="flex items-center justify-between text-sm">
          <span>Weed</span><span className="font-medium">{w}</span>
        </div>
        <div className="flex items-center justify-between mt-2">
          <span className="text-sm">Overall</span>
          <span className={`text-xs text-white px-2 py-1 rounded ${label.c}`}>{label.t}</span>
        </div>
        <div className="text-xs text-gray-500">Open-Meteo Pollen Index (0‚Äì6+)</div>
      </div>
    );
  };

  // ------- Calendar (optional ICS) -------
  const renderCalendarWidget = () => {
    const fmt = (d: Date) => d.toLocaleString(undefined, { month: 'short', day: 'numeric', hour: '2-digit', minute: '2-digit' });
    if (!user?.calendarUrl && events.length === 0)
      return (<div className="space-y-3"><div className="text-sm font-medium text-center">Connect a calendar</div><div className="p-3 bg-indigo-50 rounded text-xs text-indigo-700">Add a public ICS link to <code>user.calendarUrl</code> to show upcoming events here.</div></div>);
    if (events.length === 0) return <div className="text-sm text-gray-500">No upcoming events found.</div>;
    return (
      <div className="space-y-2">
        {events.map((e, i) => (
          <div key={i} className="flex items-center space-x-2 p-2 bg-indigo-50 rounded">
            <div className="w-2 h-2 bg-indigo-500 rounded-full"></div>
            <div className="flex-1">
              <div className="text-sm font-medium">{e.title}</div>
              <div className="text-xs text-gray-500">{fmt(e.dt)}</div>
            </div>
          </div>
        ))}
      </div>
    );
  };

  // ------- Breathing (4-7-8) -------
  const renderBreathingWidget = () => {
    const [phase, setPhase] = useState<'inhale' | 'hold' | 'exhale' | 'idle'>('idle');
    const [count, setCount] = useState(0);
    const [rounds, setRounds] = useState(0);
    const timer = useRef<number | null>(null);

    const start = () => {
      setRounds(0);
      localStorage.setItem('lp-breath-streak', String((Number(localStorage.getItem('lp-breath-streak') || '0') + 1)));
      setPhase('inhale'); setCount(4);
    };
    useEffect(() => {
      if (phase === 'idle') return;
      timer.current = window.setInterval(() => setCount((c) => c - 1), 1000);
      return () => { if (timer.current) clearInterval(timer.current); };
    }, [phase]);
    useEffect(() => {
      if (phase === 'idle') return;
      if (count <= 0) {
        if (phase === 'inhale') { setPhase('hold'); setCount(7); }
        else if (phase === 'hold') { setPhase('exhale'); setCount(8); }
        else if (phase === 'exhale') { setRounds((r) => r + 1); setPhase('inhale'); setCount(4); }
      }
    }, [count, phase]);

    const streak = Number(localStorage.getItem('lp-breath-streak') || '0');

    return (
      <div className="space-y-3 text-center">
        <div className="text-sm text-gray-600">Guided 4-7-8 breathing</div>
        <div className="text-3xl font-bold">{phase === 'idle' ? 'Ready?' : count}</div>
        <div className="text-xs text-gray-500 h-5">{phase === 'idle' ? '' : phase.toUpperCase()}</div>
        <div className="flex justify-center gap-2">
          <Button size="sm" onClick={start}>Start</Button>
          <Button size="sm" variant="outline" onClick={() => { setPhase('idle'); setCount(0); }}>Stop</Button>
        </div>
        <div className="text-xs text-gray-500">Rounds: {rounds}</div>
        <div className="text-xs text-gray-500">Practice streak: {streak}</div>
      </div>
    );
  };

  // ------- Gratitude -------
  const renderGratitudeWidget = () => {
    const [text, setText] = useState('');
    const [items, setItems] = useState<string[]>(() => {
      try { return JSON.parse(localStorage.getItem('lp-gratitude') || '[]'); } catch { return []; }
    });
    const add = () => {
      if (!text.trim()) return;
      const next = [text.trim(), ...items].slice(0, 10);
      setItems(next);
      localStorage.setItem('lp-gratitude', JSON.stringify(next));
      setText('');
    };
    return (
      <div className="space-y-3">
        <div className="flex gap-2">
          <input value={text} onChange={(e) => setText(e.target.value)} placeholder="Something you're grateful for‚Ä¶" className="flex-1 text-sm border rounded px-2 py-1" />
          <Button size="sm" onClick={add}>Add</Button>
        </div>
        <ul className="space-y-1 text-sm">
          {items.length === 0 && <li className="text-gray-500">No entries yet.</li>}
          {items.map((it, i) => <li key={i} className="p-2 bg-rose-50 rounded border border-rose-100">‚Ä¢ {it}</li>)}
        </ul>
      </div>
    );
  };

  // ------- Dream Journal -------
  const renderDreamWidget = () => {
    const [text, setText] = useState('');
    const [items, setItems] = useState<Array<{ ts: string; note: string }>>(() => {
      try { return JSON.parse(localStorage.getItem('lp-dreams') || '[]'); } catch { return []; }
    });
    const add = () => {
      if (!text.trim()) return;
      const entry = { ts: new Date().toISOString(), note: text.trim() };
      const next = [entry, ...items].slice(0, 10);
      setItems(next);
      localStorage.setItem('lp-dreams', JSON.stringify(next));
      setText('');
    };
    const fmt = (iso: string) => new Date(iso).toLocaleDateString(undefined, { month: 'short', day: 'numeric' });
    return (
      <div className="space-y-3">
        <textarea value={text} onChange={(e) => setText(e.target.value)} placeholder="What do you remember from last night?"
          className="w-full text-sm border rounded px-2 py-1 min-h-[70px]" />
        <div className="flex justify-between">
          <Button size="sm" onClick={add}>Save</Button>
          <Button size="sm" variant="ghost" onClick={() => { setItems([]); localStorage.removeItem('lp-dreams'); }}>Clear</Button>
        </div>
        <ul className="space-y-2 text-sm">
          {items.length === 0 && <li className="text-gray-500">No dreams logged yet.</li>}
          {items.map((it, i) => (
            <li key={i} className="p-2 bg-violet-50 rounded border border-violet-100">
              <div className="text-xs text-gray-500 mb-1">{fmt(it.ts)}</div>
              <div>{it.note}</div>
            </li>
          ))}
        </ul>
      </div>
    );
  };

  // ------- Book Store (kept working) -------
  const renderBookStoreWidget = () => (
    <div className="space-y-4">
      <div className="flex items-center justify-center mb-4">
        <div className="relative">
          <div className="w-16 h-20 bg-gradient-to-br from-purple-600 to-indigo-600 rounded shadow-lg flex items-center justify-center">
            <i className="fas fa-eye text-white text-xl"></i>
          </div>
          <div className="absolute -top-1 -right-1 w-4 h-4 bg-emerald-500 rounded-full flex items-center justify-center">
            <span className="text-xs text-white font-bold">‚úì</span>
          </div>
        </div>
      </div>
      <div className="text-center space-y-2">
        <h3 className="font-bold text-lg text-gray-900">LightPrompt:ed</h3>
        <p className="text-sm text-gray-600">The foundational guide to soul-tech wellness</p>
        <div className="flex items-center justify-center space-x-2">
          <span className="text-2xl font-bold text-emerald-600">$11</span>
          <span className="text-sm text-gray-500 line-through">$19</span>
        </div>
      </div>
      <div className="grid grid-cols-2 gap-2">
        <Button size="sm" className="bg-gradient-to-r from-emerald-600 to-teal-600 hover:from-emerald-700 hover:to-teal-700"
          onClick={() => window.open('https://lightprompt.gumroad.com/l/xrpvr', '_blank')}>
          <i className="fas fa-shopping-cart mr-1"></i> Buy Now
        </Button>
        <Button size="sm" variant="outline" onClick={() => (window.location.href = '/dashboard?view=about')}>
          <i className="fas fa-info-circle mr-1"></i> Learn More
        </Button>
      </div>
      <div className="text-xs text-center text-gray-500 bg-emerald-50 p-2 rounded">
        üí´ <strong>Foundation first:</strong> Start with the book, then explore the tools that call to you.
      </div>
    </div>
  );

  // ----------------------- Render -----------------------
  return (
    <div className="space-y-4">
      {/* Controls */}
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-2">
          <h3 className="font-semibold">Dashboard Widgets</h3>
          <Badge variant="outline" className="text-xs">{enabledWidgets.length} active</Badge>
        </div>
        <div className="flex items-center space-x-2">
          {/* <WidgetLibrary onAddWidget={addWidget} currentWidgets={widgets} /> */}
          <Button size="sm" variant={isEditMode ? 'default' : 'outline'} onClick={() => setIsEditMode(!isEditMode)}>
            <i className={`fas ${isEditMode ? 'fa-check' : 'fa-edit'} mr-2`}></i>{isEditMode ? 'Done' : 'Customize'}
          </Button>
          {isEditMode && (
            <Button size="sm" variant="ghost" onClick={resetLayout}>
              <i className="fas fa-undo mr-2"></i> Reset
            </Button>
          )}
        </div>
      </div>

      {/* Grid */}
      <DragDropContext onDragEnd={handleDragEnd}>
        <Droppable droppableId="dashboard-widgets">
          {(provided, snapshot) => (
            <div {...provided.droppableProps} ref={provided.innerRef}
              className={`grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 ${snapshot.isDraggingOver ? 'bg-blue-50' : ''} transition-colors duration-200`}>
              {enabledWidgets.map((widget, index) => renderWidget(widget, index))}
              {provided.placeholder}
            </div>
          )}
        </Droppable>
      </DragDropContext>

      {/* Hidden */}
      {isEditMode && widgets.some(w => !w.enabled) && (
        <div className="mt-6">
          <h4 className="font-medium text-gray-700 mb-3">Hidden Widgets</h4>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3">
            {widgets.filter(w => !w.enabled).map(widget => (
              <Card key={widget.id} className="opacity-50 border-dashed hover:opacity-75 transition-opacity">
                <CardContent className="p-3">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-2">
                      {getWidgetIcon(widget.type)} <span className="text-sm font-medium">{widget.title}</span>
                    </div>
                    <Button size="sm" variant="ghost" onClick={() => toggleWidget(widget.id)}
                      className="h-6 w-6 p-0 hover:bg-green-100">
                      <i className="fas fa-plus text-green-500 text-xs"></i>
                    </Button>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </div>
      )}
    </div>
  );
}
